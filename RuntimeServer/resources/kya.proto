package KYA;

// Telemetry
message Telemetry {
    
    //Heartbeat
    message HeartRate {

        //Measurement before user being notified
        required int32 before = 1;
        
        //Measurement after user being notified
        required int32 after = 2;
    }
    
    //Survey
    message Survey {
        //Risk calculated by KYA
        required int32 actualRisk = 2;

        //Risk perceived by the user
        required int32 perceivedRisk = 3;
    }

    //Identifier of the device where the telemetry was captured
    required  int32  userID  = 1;                 
    
    //Identifier of a notification
    required  int32  notificationID = 2;     
     
    // Zone where the record was captured or obtained
    required  int32  zoneID = 3;     
    
    //Heart rate mesaurement record that may come in a telemetry record
    optional  HeartRate  heartRate  = 4;
    
    //Survey response record that may come in a telemetry record
    optional  Survey  survey = 5;
}

// Contains a latitude and longitude that represents a location in space. 
message GeoPoint {
    
    //Identifier of the device where the telemetry was captured
    required int32 userID = 1;

    // Latitude coordinate in physical space.
    required double latitude = 2;

    // Longitude coordinate in physical space.
    required double longitude = 3;
}

// Message sent by the wear device to check in. This message is sent periodically
// from the client device, to check if the wearable device has moved in a positive
// risk gradient.
message CheckIn {
    
    // Unique Id for the wearable device. This could either be registered or use
    // a particular serial value unique to the physical device.
    required int32 userId = 1;

    // Location of wearable device at the time of checkin. This has two purposes
    // (1) to check for changes between areas that the user traverses and (2) to 
    // track user mobility for telemetry purposes.
    required GeoPoint location = 2;

    // Speed at which user is moving. This can be used to determine the what is 
    // the most efficient request interval, along with the user distance from 
    // the closest risk zone increase.
    optional double speed = 3;
}
        