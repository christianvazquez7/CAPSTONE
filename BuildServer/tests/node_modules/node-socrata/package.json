{
  "name": "node-socrata",
  "version": "0.0.50",
  "description": "A node.js implementation for the Socrata Open Data API (SODA)",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "keywords": [
    "Open",
    "Open-Data",
    "Data",
    "Socrata",
    "SODA",
    "API"
  ],
  "author": {
    "name": "Andrew Burnes",
    "email": "apburnes@gmail.com",
    "url": "apburnes.github.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/apburnes/node-socrata"
  },
  "homepage": "https://github.com/apburnes/node-socrata",
  "license": "MIT",
  "dependencies": {
    "rest": "^1.1.1",
    "through": "~2.3.4",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "tape": "^2.13.3"
  },
  "readme": "##node-socrata##\nA Node.js interface to access the Socrata Open Data API (SODA)\n\n\n###*Note: Work in Progress###\n\n####Install####\n```bash\n$ npm install node-socrata\n```\n###Examples###\n\n####'GET' Requests####\n\n__Request All Data:__ _default limit: 1000 records_\n\nUsing a default 'GET' request with no query parameter returns all records\nand fields in the destination data resource table.\n\n```javascript\nvar Socrata = require('node-socrata');\n\nvar config = {\n  // find a hostDomain from the listSource method\n  hostDomain: 'https://controllerdata.lacity.org',\n  // An accessible API table from the host domain\n  resource: 'revenue',\n  // Create account and register app https://opendata.socrata.com\n  XAppToken: process.env.SOCRATA_APP_TOKEN || 'registered-app-token'\n};\n\nvar soda = new Socrata(config);\n\nsoda.get(function(err, response, data) {\n  // response = json object returning headers, status, path, method\n  // data  = json object of table records\n});\n\n```\n\n__Query Data with Socrata's 'SoQL' __\n\nUse a query parameter object to filter/query the destination resource table.\n\nParameters | Description | Default\n--- | --- | ---\n`$select`|The set of columns to be returned|All columns\n`$where`|Filters the rows to be returned|No filter\n`$order`|Specifies the order of results| Unorder\n`$group`|Column to group results on, similar to SQL Grouping|No grouping\n`$limit`|Maximum number of results to return|1000 (and a maximum of 1000)\n`$offset`|Offset count into the results to start at, used for paging|Starts at 0\n`$q`|Performs a full text search for a value|No search\n\n```javascript\n// Create query parameter object:\n// Return ten records & only fund_name and fiscal_year\n\n/** Query Parameters initial \"$\" is optional **/\nvar params = {\n  $select: ['fund_name', 'fiscal_year'],\n  $limit: 10\n}\n\nsoda.get(params, function(err, response, data) {\n  // data... use it.\n});\n\n```\n\n####'POST' Requests####\n\nTo post data to your authorized Socrata tables use the `.post` method which\ntakes two arguments: data _(json)_ and a callback function which returns the\nresponse.\n\nTo use the post method, you will have to setup your Socrata username and\npassword in the initial config to execute a successful post.\n\n```javascript\n//  Setup and configure the Socrata table to execute a 'POST' request\nvar Socrata = require('node-socrata');\n\nvar config = {\n  hostDomain: 'https://opendata.socrata.com', // The host domain for the table.\n  resource: 'my-table', // The table where data will be posted.\n  username: process.env.SOCRATA_USERNAME || 'username',\n  password: process.env.SOCRATA_PASSWORD || 'password',\n  XAppToken: process.env.SOCRATA_APP_TOKEN || 'registered-app-token'\n};\n\n// **Note: Make sure to follow the table's existing schema;\nvar data = {\n  foo: 'bar'\n};\n\nvar soda = new Socrata(config);\n\n// Post that data\nsoda.post(data, function(err, response, record) {\n  // handle error, response, and record\n});\n\n```\n\nWith a successful post, the callback's __record__ argument will return\nthe number of records created, deleted, and updated.  With the post method,\nrecords will only be created.\n\n```\nOutput generated from the record\n\n{ 'By RowIdentifier': 0,\n  'Rows Updated': 0,\n  'Rows Deleted': 0,\n  'Rows Created': 1,\n  Errors: 0,\n  'By SID': 0\n}\n\n```\n\n####TODO####\n- Add 'DELETE' method\n- Add 'PUT' method\n- Add supported data types\n\n####About####\nby Andrew Burnes - apburnes@gmail.com\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apburnes/node-socrata/issues"
  },
  "_id": "node-socrata@0.0.50",
  "dist": {
    "shasum": "1dfde08434ab449dae3ca454a981c450c6623d47"
  },
  "_from": "node-socrata@",
  "_resolved": "https://registry.npmjs.org/node-socrata/-/node-socrata-0.0.50.tgz"
}
